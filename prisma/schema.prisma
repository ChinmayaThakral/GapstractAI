//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model AnalyticsLocalMetric {
  id        String   @id() @default(uuid())
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  organizationRoles OrganizationRole[]
  papers            Paper[]            @relation("user")
  annotations       Annotation[]       @relation("user")
  researchGaps      ResearchGap[]      @relation("user")
}

/// @@allow('all', true)
model Paper {
  id                String        @id() @default(uuid())
  title             String
  abstract          String?
  pdfUrl            String?
  status            String?
  validationScore   Float?
  organizationId    String
  organization      Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  userId            String
  user              User?         @relation(fields: [userId], references: [id], name: "user")
  annotations       Annotation[]  @relation("paper")
  researchGaps      ResearchGap[] @relation("paper")
  algorithms        Algorithm[]   @relation("paper")
  citationsAsSource Citation[]    @relation("source")
  citationsAsTarget Citation[]    @relation("target")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Annotation {
  id        String   @id() @default(uuid())
  content   String
  paperId   String
  paper     Paper?   @relation(fields: [paperId], references: [id], name: "paper")
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model ResearchGap {
  id          String   @id() @default(uuid())
  description String
  hypothesis  String?
  methodology String?
  paperId     String
  paper       Paper?   @relation(fields: [paperId], references: [id], name: "paper")
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Algorithm {
  id          String   @id() @default(uuid())
  name        String
  description String?
  efficiency  String?
  paperId     String
  paper       Paper?   @relation(fields: [paperId], references: [id], name: "paper")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Citation {
  id        String   @id() @default(uuid())
  context   String?
  sourceId  String
  source    Paper?   @relation(fields: [sourceId], references: [id], name: "source")
  targetId  String
  target    Paper?   @relation(fields: [targetId], references: [id], name: "target")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id         String             @id() @default(uuid())
  name       String
  pictureUrl String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @default(now()) @updatedAt()
  roles      OrganizationRole[]
  papers     Paper[]            @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}
